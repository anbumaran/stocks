//@version=6
indicator("Trendlines with Breaks and Big Candle [AA]", "TL BO BCd", overlay = true)

//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
//===>Trendlines with Breaks - Inputs<=== 
length = input.int(2, 'Swing Detection Lookback', group = 'TrendLine Breakouts')
mult = input.float(0., 'Slope', minval = 0, step = .1, group = 'TrendLine Breakouts')
calcMethod = input.string('Atr', 'Slope Calculation Method', options = ['Atr','Stdev','Linreg'], group = 'TrendLine Breakouts')
backpaint = input(true, tooltip = 'Backpainting offset displayed elements in the past. Disable backpainting to see real time information returned by the indicator.', 
              group = 'TrendLine Breakouts')
showTL = input(true, 'Show Trendlines', group = 'TrendLine Breakouts')
showTLBO = input(true, 'Show Trendlines Breakouts', group = 'TrendLine Breakouts')
showExt = input(true, 'Show Extended Lines', group = 'TrendLine Breakouts')

//===>Big Candle - Calculation - Inputs<=== 
percentageThreshold = input.float(0.15, title="Percentage Threshold (%)", minval=0.01, step=0.01, tooltip="Minimum percentage difference to consider a candle as 'big'.", group = 'Big Candle')
candleSizeMethod = input.string("Prev Close to Current Close", title="Candle Size Calculation Method", 
     options=["Open-Close", "High-Low", "Open-High", "Open-Low", "Prev Close to Current Close", "Prev Close to Current Open"], group = 'Big Candle')
bgcolorBigCd = input.bool(false, 'Show Big Candle background', group = 'Big Candle')
showBigCd = input(true, 'Show Big Candles', group = 'Big Candle')

//Style
upCss = input.color(color.green, 'Up Trendline Color', group = 'Style')
dnCss = input.color(color.red, 'Down Trendline Color', group = 'Style')


//-----------------------------------------------------------------------------}
//Calculations
//-----------------------------------------------------------------------------{
//===>Trendlines with Breaks - Calculations<=== 

var offset = backpaint ? length : 0

n = bar_index
src = close

getTrendLineBreakout(_timeFrame) =>
    ph = request.security(syminfo.tickerid, _timeFrame, ta.pivothigh(length, length))
    pl = request.security(syminfo.tickerid, _timeFrame, ta.pivotlow(length, length))

    //Slope Calculation Method
    slope = switch calcMethod
        'Atr'    => request.security(syminfo.tickerid, _timeFrame, ta.atr(length)) / length * mult
        'Stdev'  => request.security(syminfo.tickerid, _timeFrame, ta.stdev(src,length)) / length * mult
        'Linreg' => math.abs(
             request.security(syminfo.tickerid, _timeFrame, ta.sma(src * n, length)) -
             request.security(syminfo.tickerid, _timeFrame, ta.sma(src, length)) *
             request.security(syminfo.tickerid, _timeFrame, ta.sma(n, length))) / 
             request.security(syminfo.tickerid, _timeFrame, ta.variance(n, length)) / 2 * mult

    //Get slopes and calculate trendlines
    var float slope_ph = na
    var float slope_pl = na

    slope_ph := not na(ph) ? slope : slope_ph
    slope_pl := not na(pl) ? slope : slope_pl

    var float upper = na
    var float lower = na

    upper := not na(ph) ? ph : upper - slope_ph
    lower := not na(pl) ? pl : lower + slope_pl

    var upos = 0
    var dnos = 0
    upos := not na(ph) ? 0 : close > upper - slope_ph * length ? 1 : upos
    dnos := not na(pl) ? 0 : close < lower + slope_pl * length ? 1 : dnos
    [upos, dnos, ph, pl, upper, lower, slope_ph, slope_pl, slope]

[upos15m, dnos15m, ph15m, pl15m, upper15m, lower15m, slope_ph15m, slope_pl15m, slope15m] = getTrendLineBreakout("15")
[upos3m, dnos3m, ph3m, pl3m, upper3m, lower3m, slope_ph3m, slope_pl3m, slope3m] = getTrendLineBreakout("3")

//===>Big Candle - Calculations<=== 
candleSize = switch candleSizeMethod
    "Open-Close" => math.abs(close - open)
    "High-Low" => high - low
    "Open-High" => high - open
    "Open-Low" => open - low
    "Prev Close to Current Close" => math.abs(close - nz(close[1]))
    "Prev Close to Current Open" => math.abs(open - nz(close[1]))

// Calculate the percentage difference
basePrice = switch candleSizeMethod
    "Open-Close" => open
    "High-Low" => open
    "Open-High" => open
    "Open-Low" => open
    "Prev Close to Current Close" => nz(close[1])
    "Prev Close to Current Open" => nz(close[1])

candlePercentage = (candleSize / basePrice) * 100

// Check if the candle is big
isBigCandle = candlePercentage >= percentageThreshold


//-----------------------------------------------------------------------------}
//Extended Lines
//-----------------------------------------------------------------------------{

var uptl  = line.new(na,na,na,na, color = upCss, style = line.style_dashed, extend = extend.right)
var dntl  = line.new(na,na,na,na, color = dnCss, style = line.style_dashed, extend = extend.right)

if not na(ph15m) and showExt
    uptl.set_xy1(n-offset, backpaint ? ph15m : upper15m - slope_ph15m * length)
    uptl.set_xy2(n-offset+1, backpaint ? ph15m - slope15m : upper15m - slope_ph15m * (length+1))

if not na(pl15m) and showExt
    dntl.set_xy1(n-offset, backpaint ? pl15m : lower15m + slope_pl15m * length)
    dntl.set_xy2(n-offset+1, backpaint ? pl15m + slope15m : lower15m + slope_pl15m * (length+1))

if not na(ph3m) and showExt
    uptl.set_xy1(n-offset, backpaint ? ph3m : upper3m - slope_ph3m * length)
    uptl.set_xy2(n-offset+1, backpaint ? ph3m - slope3m : upper3m - slope_ph3m * (length+1))

if not na(pl3m) and showExt
    dntl.set_xy1(n-offset, backpaint ? pl3m : lower3m + slope_pl3m * length)
    dntl.set_xy2(n-offset+1, backpaint ? pl3m + slope3m : lower3m + slope_pl3m * (length+1))

//-----------------------------------------------------------------------------}
//Plots
//-----------------------------------------------------------------------------{
//===>Trendlines with Breaks - Plots<=== 
plot(backpaint and showTL ? upper15m : showTL ? upper15m - slope_ph15m * length : na, 'Upper', color = not na(ph15m) ? na : upCss, offset = -offset)
plot(backpaint and showTL ? lower15m : showTL ? lower15m + slope_pl15m * length : na, 'Lower', color = not na(pl15m) ? na : dnCss, offset = -offset)

plot(backpaint and showTL ? upper3m : showTL ? upper3m - slope_ph3m * length : na, 'Upper', color = not na(ph3m) ? na : upCss, offset = -offset)
plot(backpaint and showTL ? lower3m : showTL ? lower3m + slope_pl3m * length : na, 'Lower', color = not na(pl3m) ? na : dnCss, offset = -offset)

//Breakouts
plotshape(showTLBO and upos15m > upos15m[1] ? low : na, "Upper Break"
  , shape.labelup
  , location.absolute
  , upCss
  , text = "u15"
  , textcolor = color.white
  , size = size.tiny)

plotshape(showTLBO and dnos15m > dnos15m[1] ? high : na, "Lower Break"
  , shape.labeldown
  , location.absolute
  , dnCss
  , text = "d15"
  , textcolor = color.white
  , size = size.tiny)

plotshape(showTLBO and upos3m > upos3m[1] ? low : na, "Upper Break"
  , shape.labelup
  , location.absolute
  , upCss
  , text = "u3"
  , textcolor = color.white
  , size = size.tiny)

plotshape(showTLBO and dnos3m > dnos3m[1] ? high : na, "Lower Break"
  , shape.labeldown
  , location.absolute
  , dnCss
  , text = "d3"
  , textcolor = color.white
  , size = size.tiny)

//===>Big Candle - Plots<=== 
plotshape(series=isBigCandle and close > open and showBigCd, style=shape.labelup, location=location.belowbar, color=upCss, size=size.tiny, text="Bc", textcolor=color.white)
plotshape(series=isBigCandle and close < open and showBigCd, style=shape.labeldown, location=location.abovebar, color=dnCss, size=size.tiny, text="Bc", textcolor=color.white)

// Optionally, highlight the background of big candles

bgcolor(isBigCandle and bgcolorBigCd ? (close > open ? color.new(upCss, 85) : color.new(dnCss, 85)) : na) 

//-----------------------------------------------------------------------------}
//Alerts
//-----------------------------------------------------------------------------{
alertcondition(upos15m > upos15m[1] or (isBigCandle and close > open), 'Upward Breakout', 'Price broke the down-trendline upward or Green Big candle')
alertcondition(dnos15m > dnos15m[1] or (isBigCandle and close < open), 'Downward Breakout', 'Price broke the up-trendline downward or Red Big candle')

//-----------------------------------------------------------------------------}
